import hou 
import os 

#get texture folder and file format     
#get ABSOLUTE filepath
userInput = hou.ui.readInput("Copy and paste the path to the folder where you saved your " + 
"texture files: ",buttons=("okay","close",),default_choice=0,title="import texture files")

if (userInput[0] == 1):
    quit()
filePath = userInput[1]

#print ("unmodified filepath is: " + filePath)
#change forward slashes to backslashes 
filePath = filePath.replace("\\","/")
#print("corrected relative filepath is: " + filePath)


fileFormatNum = hou.ui.displayMessage("What file format did you use to save your texture " + 
"files?",buttons=(".png",".jpg",".tif","close",),default_choice=0,title="import texture files")

if(fileFormatNum == 0):
    fileFormat = ".png"
elif(fileFormatNum == 1):
    fileFormat = ".jpg"
elif(fileFormatNum == 2):
    fileFormat = ".tif"
elif(fileFormatNum == 3):
    quit()

#determine shaderName 
folder = os.listdir(filePath)

for file in folder: 
    if file.endswith("_DiffuseColor"+fileFormat):
        shaderFileName = str(file).replace(("_DiffuseColor"+fileFormat),"")
        #remove spaces
        shaderName = shaderFileName.replace(" ","_")
        print("creating shader for "+shaderName)
    else: continue
    
    matLibLoc = "stage/"+"pxr_"+str(shaderName)+"/"
    matLib = hou.node(matLibLoc)
    #cleanup
    toDelete = hou.vopNodeTypeCategory().nodeType("usdpreviewsurface").instances()
    print(toDelete)
    if(len(toDelete)!= 0):
        toDelete[0].destroy()
    
    #make blank pxrtexture network named after first file in folder MINUS basecolor + fileformat
    #pxrMaterialBuilder = matLib.createNode("pxrmaterialbuilder",shaderName+"_MAT")
    outputCollect = hou.node(matLibLoc+"collect1")
    #create pxrSurface and wire into output_collect
    #pxrSurface = pxrMaterialBuilder.createNode("pxrsurface","yo_mom")
    pxrSurface = matLib.createNode("pxrsurface","pxr_"+shaderName)
    outputCollect.setInput(0,pxrSurface,0)
    #diffuse color
    #diffuseColor = pxrMaterialBuilder.createNode("pxrtexture","diffuse_color_pxrtexture")
    diffuseColor = matLib.createNode("pxrtexture","diffuse_color_pxrtexture")
    diffuseColor.parm("linearize").set(1)
    pxrSurface.setInput(2,diffuseColor,0)
    #specular face color
    #specFaceColor = pxrMaterialBuilder.createNode("pxrtexture","spec_face_color_pxrtexture")
    specFaceColor = matLib.createNode("pxrtexture","spec_face_color_pxrtexture")
    specFaceColor.parm("linearize").set("1")
    pxrSurface.setInput(9,specFaceColor,0)
    #specular roughness
    #specRoughness = pxrMaterialBuilder.createNode("pxrtexture","spec_roughness_pxrtexture")
    specRoughness = matLib.createNode("pxrtexture","spec_roughness_pxrtexture")
    pxrSurface.setInput(14,specRoughness,1)
    #normal 
    #normal = pxrMaterialBuilder.createNode("pxrnormalmap","normal_map")
    normal = matLib.createNode("pxrnormalmap","normal_map")
    pxrSurface.setInput(103,normal,0)
    #displacement
    #pxrDisplace = pxrMaterialBuilder.createNode("pxrdisplace")
    pxrDisplace = matLib.createNode("pxrdisplace")
    #note: this is just a starting place. you'll likely have to adjust it manually furthur)
    pxrDisplace.parm("dispAmount").set("0.015")
    outputCollect.setInput(1,pxrDisplace,0)
    #pxrDispTransform = pxrMaterialBuilder.createNode("pxrdisptransform")
    pxrDispTransform = matLib.createNode("pxrdisptransform")
    #this is assuming your displacement map has a midpoint of 0.5 
    #(which if you're using substance painter usually it will)
    pxrDispTransform.parm("dispRemapMode").set("2")
    pxrDisplace.setInput(1,pxrDispTransform,1)
    #displacement = pxrMaterialBuilder.createNode("pxrtexture","displacement_pxrtexture")
    displacement = matLib.createNode("pxrtexture","displacement_pxrtexture")
    pxrDispTransform.setInput(0,displacement,1)
    #layout nodes inside shader
    #pxrMaterialBuilder.layoutChildren()
    matLib.layoutChildren()
    
    #import texture image files
    def ImportTextureFile(mapTypeNode, mapTypeString):
            for file in folder:
                if file.startswith(shaderFileName):
                    if file.endswith(mapTypeString+fileFormat):
                        #print ("importing the following file: " + str(file))
                        fullFilePath = filePath + "/" + str(file)
                        #print ("full file path is as follows: " + fullFilePath)
                        mapTypeNode.parm("filename").set(fullFilePath)
                        
    ImportTextureFile(diffuseColor, "DiffuseColor")
    ImportTextureFile(specFaceColor, "SpecularFaceColor")
    ImportTextureFile(specRoughness, "SpecularRoughness")
    ImportTextureFile(displacement, "Displacement")
    ImportTextureFile(normal, "Normal")
    
#layout all shader nodes
matLib.layoutChildren()
